// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String?
  avatar       String?
  provider     String  @default("spotify")
  identifier   String  @unique
  refreshToken String?
  href         String?

  playlists Playlist[]
  artists   Artist[]
  albums    Album[]
  Song      Song?      @relation(fields: [songId], references: [id])
  songId    Int?
}

// Add unique from identifier, provider
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#unique-constraints

model Playlist {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  imageUri    String?
  identifier  String  @unique
  userId      Int
  author      User    @relation(fields: [userId], references: [id])
  public      Boolean @default(false)
  href        String?

  songs Song[]
}

model Album {
  id               Int      @id @default(autoincrement())
  identifier       String   @unique
  name             String
  totalTracks      Int
  releaseDate      DateTime
  availableMarkets String[]
  images           String[]
  popularity       Int
  href             String?

  songs   Song[]
  artists Artist[]
  user    User[]
}

model Artist {
  id         Int      @id @default(autoincrement())
  identifier String   @unique
  name       String
  href       String?
  popularity Int?
  followers  Int?
  genres     String[]
  images     String[]

  albums Album[]
  user   User[]
}

model Song {
  id         Int      @id @default(autoincrement())
  identifier String
  title      String
  artist     String
  url        String
  duration   Int
  href       String?
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int
  album      Album    @relation(fields: [albumId], references: [id])
  albumId    Int

  user User[]
}
